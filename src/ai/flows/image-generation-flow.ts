// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A flow to generate an image based on a node graph.
 *
 * - generateImage - A function that takes the current state of the node canvas and returns a generated image.
 * - ImageGenerationInput - The input type for the generateImage function.
 * - ImageGenerationOutput - The return type for the generateImage function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';

const NodeSchema = z.object({
  id: z.string(),
  type: z.string(),
  name: z.string(),
  position: z.object({ x: z.number(), y: z.number() }),
  value: z.any(),
  width: z.number().optional(),
  height: z.number().optional(),
});

const ImageGenerationInputSchema = z.object({
  nodes: z.array(NodeSchema),
});
export type ImageGenerationInput = z.infer<typeof ImageGenerationInputSchema>;

const ImageGenerationOutputSchema = z.object({
  finalImage: z.string().describe("The generated image as a data URI. Expected format: 'data:image/png;base64,<encoded_data>'."),
});
export type ImageGenerationOutput = z.infer<typeof ImageGenerationOutputSchema>;


export async function generateImage(input: ImageGenerationInput): Promise<ImageGenerationOutput> {
  return imageGenerationFlow(input);
}

const imageGenerationPrompt = ai.definePrompt({
  name: 'imageGenerationPrompt',
  input: { schema: ImageGenerationInputSchema },
  output: { schema: ImageGenerationOutputSchema },
  prompt: `You are an AI image generation model. Generate an image based on the following node graph.
  The nodes are ordered by their influence (position on the y-axis).
  The most influential node is the text prompt.
  Other nodes modify the image generation process.
  
  Nodes:
  {{#each nodes}}
  - Type: {{type}}, Name: {{name}}, Value: {{json value}}
  {{/each}}
  `,
});


const imageGenerationFlow = ai.defineFlow(
  {
    name: 'imageGenerationFlow',
    inputSchema: ImageGenerationInputSchema,
    outputSchema: ImageGenerationOutputSchema,
  },
  async (input) => {
    const textPromptNode = input.nodes.find(node => node.type === 'text-prompt');
    const promptText = textPromptNode ? String(textPromptNode.value) : 'A beautiful landscape.';

    // A more complex implementation could use tools to interpret each node.
    // For now, we'll just use the main text prompt.

    const { media } = await ai.generate({
      model: 'googleai/gemini-2.0-flash-preview-image-generation',
      prompt: promptText,
      config: {
        responseModalities: ['TEXT', 'IMAGE'],
      },
    });

    if (!media.url) {
      throw new Error('Image generation failed.');
    }

    return {
      finalImage: media.url,
    };
  }
);
